// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`esm: zod > resolve zod@3.24.2 1`] = `
"// cdn-imports:https://esm.sh/zod@3.24.2/es2022/zod.mjs
var g;
(function(r16) {
  r16.assertEqual = (n) => n;
  function e(n) {
  }
  r16.assertIs = e;
  function t(n) {
    throw new Error();
  }
  r16.assertNever = t, r16.arrayToEnum = (n) => {
    let a = {};
    for (let i of n) a[i] = i;
    return a;
  }, r16.getValidEnumValues = (n) => {
    let a = r16.objectKeys(n).filter((o) => typeof n[n[o]] != "number"), i = {};
    for (let o of a) i[o] = n[o];
    return r16.objectValues(i);
  }, r16.objectValues = (n) => r16.objectKeys(n).map(function(a) {
    return n[a];
  }), r16.objectKeys = typeof Object.keys == "function" ? (n) => Object.keys(n) : (n) => {
    let a = [];
    for (let i in n) Object.prototype.hasOwnProperty.call(n, i) && a.push(i);
    return a;
  }, r16.find = (n, a) => {
    for (let i of n) if (a(i)) return i;
  }, r16.isInteger = typeof Number.isInteger == "function" ? (n) => Number.isInteger(n) : (n) => typeof n == "number" && isFinite(n) && Math.floor(n) === n;
  function s(n, a = " | ") {
    return n.map((i) => typeof i == "string" ? \`'\${i}'\` : i).join(a);
  }
  r16.joinValues = s, r16.jsonStringifyReplacer = (n, a) => typeof a == "bigint" ? a.toString() : a;
})(g || (g = {}));
var be;
(function(r16) {
  r16.mergeShapes = (e, t) => ({ ...e, ...t });
})(be || (be = {}));
var f = g.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"]);
var R = (r16) => {
  switch (typeof r16) {
    case "undefined":
      return f.undefined;
    case "string":
      return f.string;
    case "number":
      return isNaN(r16) ? f.nan : f.number;
    case "boolean":
      return f.boolean;
    case "function":
      return f.function;
    case "bigint":
      return f.bigint;
    case "symbol":
      return f.symbol;
    case "object":
      return Array.isArray(r16) ? f.array : r16 === null ? f.null : r16.then && typeof r16.then == "function" && r16.catch && typeof r16.catch == "function" ? f.promise : typeof Map < "u" && r16 instanceof Map ? f.map : typeof Set < "u" && r16 instanceof Set ? f.set : typeof Date < "u" && r16 instanceof Date ? f.date : f.object;
    default:
      return f.unknown;
  }
};
var d = g.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"]);
var ze = (r16) => JSON.stringify(r16, null, 2).replace(/"([^"]+)":/g, "$1:");
var T = class r extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (s) => {
      this.issues = [...this.issues, s];
    }, this.addIssues = (s = []) => {
      this.issues = [...this.issues, ...s];
    };
    let t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    let t = e || function(a) {
      return a.message;
    }, s = { _errors: [] }, n = (a) => {
      for (let i of a.issues) if (i.code === "invalid_union") i.unionErrors.map(n);
      else if (i.code === "invalid_return_type") n(i.returnTypeError);
      else if (i.code === "invalid_arguments") n(i.argumentsError);
      else if (i.path.length === 0) s._errors.push(t(i));
      else {
        let o = s, l = 0;
        for (; l < i.path.length; ) {
          let c = i.path[l];
          l === i.path.length - 1 ? (o[c] = o[c] || { _errors: [] }, o[c]._errors.push(t(i))) : o[c] = o[c] || { _errors: [] }, o = o[c], l++;
        }
      }
    };
    return n(this), s;
  }
  static assert(e) {
    if (!(e instanceof r)) throw new Error(\`Not a ZodError: \${e}\`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, g.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    let t = {}, s = [];
    for (let n of this.issues) n.path.length > 0 ? (t[n.path[0]] = t[n.path[0]] || [], t[n.path[0]].push(e(n))) : s.push(e(n));
    return { formErrors: s, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
};
T.create = (r16) => new T(r16);
var re = (r16, e) => {
  let t;
  switch (r16.code) {
    case d.invalid_type:
      r16.received === f.undefined ? t = "Required" : t = \`Expected \${r16.expected}, received \${r16.received}\`;
      break;
    case d.invalid_literal:
      t = \`Invalid literal value, expected \${JSON.stringify(r16.expected, g.jsonStringifyReplacer)}\`;
      break;
    case d.unrecognized_keys:
      t = \`Unrecognized key(s) in object: \${g.joinValues(r16.keys, ", ")}\`;
      break;
    case d.invalid_union:
      t = "Invalid input";
      break;
    case d.invalid_union_discriminator:
      t = \`Invalid discriminator value. Expected \${g.joinValues(r16.options)}\`;
      break;
    case d.invalid_enum_value:
      t = \`Invalid enum value. Expected \${g.joinValues(r16.options)}, received '\${r16.received}'\`;
      break;
    case d.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case d.invalid_return_type:
      t = "Invalid function return type";
      break;
    case d.invalid_date:
      t = "Invalid date";
      break;
    case d.invalid_string:
      typeof r16.validation == "object" ? "includes" in r16.validation ? (t = \`Invalid input: must include "\${r16.validation.includes}"\`, typeof r16.validation.position == "number" && (t = \`\${t} at one or more positions greater than or equal to \${r16.validation.position}\`)) : "startsWith" in r16.validation ? t = \`Invalid input: must start with "\${r16.validation.startsWith}"\` : "endsWith" in r16.validation ? t = \`Invalid input: must end with "\${r16.validation.endsWith}"\` : g.assertNever(r16.validation) : r16.validation !== "regex" ? t = \`Invalid \${r16.validation}\` : t = "Invalid";
      break;
    case d.too_small:
      r16.type === "array" ? t = \`Array must contain \${r16.exact ? "exactly" : r16.inclusive ? "at least" : "more than"} \${r16.minimum} element(s)\` : r16.type === "string" ? t = \`String must contain \${r16.exact ? "exactly" : r16.inclusive ? "at least" : "over"} \${r16.minimum} character(s)\` : r16.type === "number" ? t = \`Number must be \${r16.exact ? "exactly equal to " : r16.inclusive ? "greater than or equal to " : "greater than "}\${r16.minimum}\` : r16.type === "date" ? t = \`Date must be \${r16.exact ? "exactly equal to " : r16.inclusive ? "greater than or equal to " : "greater than "}\${new Date(Number(r16.minimum))}\` : t = "Invalid input";
      break;
    case d.too_big:
      r16.type === "array" ? t = \`Array must contain \${r16.exact ? "exactly" : r16.inclusive ? "at most" : "less than"} \${r16.maximum} element(s)\` : r16.type === "string" ? t = \`String must contain \${r16.exact ? "exactly" : r16.inclusive ? "at most" : "under"} \${r16.maximum} character(s)\` : r16.type === "number" ? t = \`Number must be \${r16.exact ? "exactly" : r16.inclusive ? "less than or equal to" : "less than"} \${r16.maximum}\` : r16.type === "bigint" ? t = \`BigInt must be \${r16.exact ? "exactly" : r16.inclusive ? "less than or equal to" : "less than"} \${r16.maximum}\` : r16.type === "date" ? t = \`Date must be \${r16.exact ? "exactly" : r16.inclusive ? "smaller than or equal to" : "smaller than"} \${new Date(Number(r16.maximum))}\` : t = "Invalid input";
      break;
    case d.custom:
      t = "Invalid input";
      break;
    case d.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case d.not_multiple_of:
      t = \`Number must be a multiple of \${r16.multipleOf}\`;
      break;
    case d.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, g.assertNever(r16);
  }
  return { message: t };
};
var Ee = re;
function De(r16) {
  Ee = r16;
}
function pe() {
  return Ee;
}
var me = (r16) => {
  let { data: e, path: t, errorMaps: s, issueData: n } = r16, a = [...t, ...n.path || []], i = { ...n, path: a };
  if (n.message !== void 0) return { ...n, path: a, message: n.message };
  let o = "", l = s.filter((c) => !!c).slice().reverse();
  for (let c of l) o = c(i, { data: e, defaultError: o }).message;
  return { ...n, path: a, message: o };
};
var Le = [];
function u(r16, e) {
  let t = pe(), s = me({ issueData: e, data: r16.data, path: r16.path, errorMaps: [r16.common.contextualErrorMap, r16.schemaErrorMap, t, t === re ? void 0 : re].filter((n) => !!n) });
  r16.common.issues.push(s);
}
var x = class r2 {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    let s = [];
    for (let n of t) {
      if (n.status === "aborted") return v;
      n.status === "dirty" && e.dirty(), s.push(n.value);
    }
    return { status: e.value, value: s };
  }
  static async mergeObjectAsync(e, t) {
    let s = [];
    for (let n of t) {
      let a = await n.key, i = await n.value;
      s.push({ key: a, value: i });
    }
    return r2.mergeObjectSync(e, s);
  }
  static mergeObjectSync(e, t) {
    let s = {};
    for (let n of t) {
      let { key: a, value: i } = n;
      if (a.status === "aborted" || i.status === "aborted") return v;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || n.alwaysSet) && (s[a.value] = i.value);
    }
    return { status: e.value, value: s };
  }
};
var v = Object.freeze({ status: "aborted" });
var te = (r16) => ({ status: "dirty", value: r16 });
var b = (r16) => ({ status: "valid", value: r16 });
var we = (r16) => r16.status === "aborted";
var Te = (r16) => r16.status === "dirty";
var P = (r16) => r16.status === "valid";
var ue = (r16) => typeof Promise < "u" && r16 instanceof Promise;
function ve(r16, e, t, s) {
  if (t === "a" && !s) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? r16 !== e || !s : !e.has(r16)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return t === "m" ? s : t === "a" ? s.call(r16) : s ? s.value : e.get(r16);
}
function Ze(r16, e, t, s, n) {
  if (s === "m") throw new TypeError("Private method is not writable");
  if (s === "a" && !n) throw new TypeError("Private accessor was defined without a setter");
  if (typeof e == "function" ? r16 !== e || !n : !e.has(r16)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return s === "a" ? n.call(r16, t) : n ? n.value = t : e.set(r16, t), t;
}
var h;
(function(r16) {
  r16.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, r16.toString = (e) => typeof e == "string" ? e : e?.message;
})(h || (h = {}));
var de;
var ce;
var S = class {
  constructor(e, t, s, n) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = s, this._key = n;
  }
  get path() {
    return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
};
var Oe = (r16, e) => {
  if (P(e)) return { success: true, data: e.value };
  if (!r16.common.issues.length) throw new Error("Validation failed but no issues detected.");
  return { success: false, get error() {
    if (this._error) return this._error;
    let t = new T(r16.common.issues);
    return this._error = t, this._error;
  } };
};
function _(r16) {
  if (!r16) return {};
  let { errorMap: e, invalid_type_error: t, required_error: s, description: n } = r16;
  if (e && (t || s)) throw new Error(\`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.\`);
  return e ? { errorMap: e, description: n } : { errorMap: (i, o) => {
    var l, c;
    let { message: p } = r16;
    return i.code === "invalid_enum_value" ? { message: p ?? o.defaultError } : typeof o.data > "u" ? { message: (l = p ?? s) !== null && l !== void 0 ? l : o.defaultError } : i.code !== "invalid_type" ? { message: o.defaultError } : { message: (c = p ?? t) !== null && c !== void 0 ? c : o.defaultError };
  }, description: n };
}
var y = class {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return R(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || { common: e.parent.common, data: e.data, parsedType: R(e.data), schemaErrorMap: this._def.errorMap, path: e.path, parent: e.parent };
  }
  _processInputParams(e) {
    return { status: new x(), ctx: { common: e.parent.common, data: e.data, parsedType: R(e.data), schemaErrorMap: this._def.errorMap, path: e.path, parent: e.parent } };
  }
  _parseSync(e) {
    let t = this._parse(e);
    if (ue(t)) throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    let t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    let s = this.safeParse(e, t);
    if (s.success) return s.data;
    throw s.error;
  }
  safeParse(e, t) {
    var s;
    let n = { common: { issues: [], async: (s = t?.async) !== null && s !== void 0 ? s : false, contextualErrorMap: t?.errorMap }, path: t?.path || [], schemaErrorMap: this._def.errorMap, parent: null, data: e, parsedType: R(e) }, a = this._parseSync({ data: e, path: n.path, parent: n });
    return Oe(n, a);
  }
  "~validate"(e) {
    var t, s;
    let n = { common: { issues: [], async: !!this["~standard"].async }, path: [], schemaErrorMap: this._def.errorMap, parent: null, data: e, parsedType: R(e) };
    if (!this["~standard"].async) try {
      let a = this._parseSync({ data: e, path: [], parent: n });
      return P(a) ? { value: a.value } : { issues: n.common.issues };
    } catch (a) {
      !((s = (t = a?.message) === null || t === void 0 ? void 0 : t.toLowerCase()) === null || s === void 0) && s.includes("encountered") && (this["~standard"].async = true), n.common = { issues: [], async: true };
    }
    return this._parseAsync({ data: e, path: [], parent: n }).then((a) => P(a) ? { value: a.value } : { issues: n.common.issues });
  }
  async parseAsync(e, t) {
    let s = await this.safeParseAsync(e, t);
    if (s.success) return s.data;
    throw s.error;
  }
  async safeParseAsync(e, t) {
    let s = { common: { issues: [], contextualErrorMap: t?.errorMap, async: true }, path: t?.path || [], schemaErrorMap: this._def.errorMap, parent: null, data: e, parsedType: R(e) }, n = this._parse({ data: e, path: s.path, parent: s }), a = await (ue(n) ? n : Promise.resolve(n));
    return Oe(s, a);
  }
  refine(e, t) {
    let s = (n) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(n) : t;
    return this._refinement((n, a) => {
      let i = e(n), o = () => a.addIssue({ code: d.custom, ...s(n) });
      return typeof Promise < "u" && i instanceof Promise ? i.then((l) => l ? true : (o(), false)) : i ? true : (o(), false);
    });
  }
  refinement(e, t) {
    return this._refinement((s, n) => e(s) ? true : (n.addIssue(typeof t == "function" ? t(s, n) : t), false));
  }
  _refinement(e) {
    return new C({ schema: this, typeName: m.ZodEffects, effect: { type: "refinement", refinement: e } });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = { version: 1, vendor: "zod", validate: (t) => this["~validate"](t) };
  }
  optional() {
    return O.create(this, this._def);
  }
  nullable() {
    return Z.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return I.create(this);
  }
  promise() {
    return V.create(this, this._def);
  }
  or(e) {
    return W.create([this, e], this._def);
  }
  and(e) {
    return q.create(this, e, this._def);
  }
  transform(e) {
    return new C({ ..._(this._def), schema: this, typeName: m.ZodEffects, effect: { type: "transform", transform: e } });
  }
  default(e) {
    let t = typeof e == "function" ? e : () => e;
    return new X({ ..._(this._def), innerType: this, defaultValue: t, typeName: m.ZodDefault });
  }
  brand() {
    return new le({ typeName: m.ZodBranded, type: this, ..._(this._def) });
  }
  catch(e) {
    let t = typeof e == "function" ? e : () => e;
    return new Q({ ..._(this._def), innerType: this, catchValue: t, typeName: m.ZodCatch });
  }
  describe(e) {
    let t = this.constructor;
    return new t({ ...this._def, description: e });
  }
  pipe(e) {
    return fe.create(this, e);
  }
  readonly() {
    return K.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var Ue = /^c[^\\s-]{8,}$/i;
var Fe = /^[0-9a-z]+$/;
var Be = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var We = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;
var qe = /^[a-z0-9_-]{21}$/i;
var Je = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;
var Ye = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;
var He = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;
var Ge = "^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$";
var ke;
var Xe = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var Qe = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;
var Ke = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var et = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var tt = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var rt = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var je = "((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))";
var st = new RegExp(\`^\${je}$\`);
function Re(r16) {
  let e = "([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d";
  return r16.precision ? e = \`\${e}\\\\.\\\\d{\${r16.precision}}\` : r16.precision == null && (e = \`\${e}(\\\\.\\\\d+)?\`), e;
}
function nt(r16) {
  return new RegExp(\`^\${Re(r16)}$\`);
}
function Ne(r16) {
  let e = \`\${je}T\${Re(r16)}\`, t = [];
  return t.push(r16.local ? "Z?" : "Z"), r16.offset && t.push("([+-]\\\\d{2}:?\\\\d{2})"), e = \`\${e}(\${t.join("|")})\`, new RegExp(\`^\${e}$\`);
}
function at(r16, e) {
  return !!((e === "v4" || !e) && Xe.test(r16) || (e === "v6" || !e) && Ke.test(r16));
}
function it(r16, e) {
  if (!Je.test(r16)) return false;
  try {
    let [t] = r16.split("."), s = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), n = JSON.parse(atob(s));
    return !(typeof n != "object" || n === null || !n.typ || !n.alg || e && n.alg !== e);
  } catch {
    return false;
  }
}
function ot(r16, e) {
  return !!((e === "v4" || !e) && Qe.test(r16) || (e === "v6" || !e) && et.test(r16));
}
var $ = class r3 extends y {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== f.string) {
      let a = this._getOrReturnCtx(e);
      return u(a, { code: d.invalid_type, expected: f.string, received: a.parsedType }), v;
    }
    let s = new x(), n;
    for (let a of this._def.checks) if (a.kind === "min") e.data.length < a.value && (n = this._getOrReturnCtx(e, n), u(n, { code: d.too_small, minimum: a.value, type: "string", inclusive: true, exact: false, message: a.message }), s.dirty());
    else if (a.kind === "max") e.data.length > a.value && (n = this._getOrReturnCtx(e, n), u(n, { code: d.too_big, maximum: a.value, type: "string", inclusive: true, exact: false, message: a.message }), s.dirty());
    else if (a.kind === "length") {
      let i = e.data.length > a.value, o = e.data.length < a.value;
      (i || o) && (n = this._getOrReturnCtx(e, n), i ? u(n, { code: d.too_big, maximum: a.value, type: "string", inclusive: true, exact: true, message: a.message }) : o && u(n, { code: d.too_small, minimum: a.value, type: "string", inclusive: true, exact: true, message: a.message }), s.dirty());
    } else if (a.kind === "email") He.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "email", code: d.invalid_string, message: a.message }), s.dirty());
    else if (a.kind === "emoji") ke || (ke = new RegExp(Ge, "u")), ke.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "emoji", code: d.invalid_string, message: a.message }), s.dirty());
    else if (a.kind === "uuid") We.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "uuid", code: d.invalid_string, message: a.message }), s.dirty());
    else if (a.kind === "nanoid") qe.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "nanoid", code: d.invalid_string, message: a.message }), s.dirty());
    else if (a.kind === "cuid") Ue.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "cuid", code: d.invalid_string, message: a.message }), s.dirty());
    else if (a.kind === "cuid2") Fe.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "cuid2", code: d.invalid_string, message: a.message }), s.dirty());
    else if (a.kind === "ulid") Be.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "ulid", code: d.invalid_string, message: a.message }), s.dirty());
    else if (a.kind === "url") try {
      new URL(e.data);
    } catch {
      n = this._getOrReturnCtx(e, n), u(n, { validation: "url", code: d.invalid_string, message: a.message }), s.dirty();
    }
    else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "regex", code: d.invalid_string, message: a.message }), s.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (n = this._getOrReturnCtx(e, n), u(n, { code: d.invalid_string, validation: { includes: a.value, position: a.position }, message: a.message }), s.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (n = this._getOrReturnCtx(e, n), u(n, { code: d.invalid_string, validation: { startsWith: a.value }, message: a.message }), s.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (n = this._getOrReturnCtx(e, n), u(n, { code: d.invalid_string, validation: { endsWith: a.value }, message: a.message }), s.dirty()) : a.kind === "datetime" ? Ne(a).test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { code: d.invalid_string, validation: "datetime", message: a.message }), s.dirty()) : a.kind === "date" ? st.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { code: d.invalid_string, validation: "date", message: a.message }), s.dirty()) : a.kind === "time" ? nt(a).test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { code: d.invalid_string, validation: "time", message: a.message }), s.dirty()) : a.kind === "duration" ? Ye.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "duration", code: d.invalid_string, message: a.message }), s.dirty()) : a.kind === "ip" ? at(e.data, a.version) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "ip", code: d.invalid_string, message: a.message }), s.dirty()) : a.kind === "jwt" ? it(e.data, a.alg) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "jwt", code: d.invalid_string, message: a.message }), s.dirty()) : a.kind === "cidr" ? ot(e.data, a.version) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "cidr", code: d.invalid_string, message: a.message }), s.dirty()) : a.kind === "base64" ? tt.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "base64", code: d.invalid_string, message: a.message }), s.dirty()) : a.kind === "base64url" ? rt.test(e.data) || (n = this._getOrReturnCtx(e, n), u(n, { validation: "base64url", code: d.invalid_string, message: a.message }), s.dirty()) : g.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _regex(e, t, s) {
    return this.refinement((n) => e.test(n), { validation: t, code: d.invalid_string, ...h.errToObj(s) });
  }
  _addCheck(e) {
    return new r3({ ...this._def, checks: [...this._def.checks, e] });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...h.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...h.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...h.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...h.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...h.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...h.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...h.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...h.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...h.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({ kind: "base64url", ...h.errToObj(e) });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...h.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...h.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...h.errToObj(e) });
  }
  datetime(e) {
    var t, s;
    return typeof e == "string" ? this._addCheck({ kind: "datetime", precision: null, offset: false, local: false, message: e }) : this._addCheck({ kind: "datetime", precision: typeof e?.precision > "u" ? null : e?.precision, offset: (t = e?.offset) !== null && t !== void 0 ? t : false, local: (s = e?.local) !== null && s !== void 0 ? s : false, ...h.errToObj(e?.message) });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({ kind: "time", precision: null, message: e }) : this._addCheck({ kind: "time", precision: typeof e?.precision > "u" ? null : e?.precision, ...h.errToObj(e?.message) });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...h.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({ kind: "regex", regex: e, ...h.errToObj(t) });
  }
  includes(e, t) {
    return this._addCheck({ kind: "includes", value: e, position: t?.position, ...h.errToObj(t?.message) });
  }
  startsWith(e, t) {
    return this._addCheck({ kind: "startsWith", value: e, ...h.errToObj(t) });
  }
  endsWith(e, t) {
    return this._addCheck({ kind: "endsWith", value: e, ...h.errToObj(t) });
  }
  min(e, t) {
    return this._addCheck({ kind: "min", value: e, ...h.errToObj(t) });
  }
  max(e, t) {
    return this._addCheck({ kind: "max", value: e, ...h.errToObj(t) });
  }
  length(e, t) {
    return this._addCheck({ kind: "length", value: e, ...h.errToObj(t) });
  }
  nonempty(e) {
    return this.min(1, h.errToObj(e));
  }
  trim() {
    return new r3({ ...this._def, checks: [...this._def.checks, { kind: "trim" }] });
  }
  toLowerCase() {
    return new r3({ ...this._def, checks: [...this._def.checks, { kind: "toLowerCase" }] });
  }
  toUpperCase() {
    return new r3({ ...this._def, checks: [...this._def.checks, { kind: "toUpperCase" }] });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
};
$.create = (r16) => {
  var e;
  return new $({ checks: [], typeName: m.ZodString, coerce: (e = r16?.coerce) !== null && e !== void 0 ? e : false, ..._(r16) });
};
function dt(r16, e) {
  let t = (r16.toString().split(".")[1] || "").length, s = (e.toString().split(".")[1] || "").length, n = t > s ? t : s, a = parseInt(r16.toFixed(n).replace(".", "")), i = parseInt(e.toFixed(n).replace(".", ""));
  return a % i / Math.pow(10, n);
}
var z = class r4 extends y {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== f.number) {
      let a = this._getOrReturnCtx(e);
      return u(a, { code: d.invalid_type, expected: f.number, received: a.parsedType }), v;
    }
    let s, n = new x();
    for (let a of this._def.checks) a.kind === "int" ? g.isInteger(e.data) || (s = this._getOrReturnCtx(e, s), u(s, { code: d.invalid_type, expected: "integer", received: "float", message: a.message }), n.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (s = this._getOrReturnCtx(e, s), u(s, { code: d.too_small, minimum: a.value, type: "number", inclusive: a.inclusive, exact: false, message: a.message }), n.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (s = this._getOrReturnCtx(e, s), u(s, { code: d.too_big, maximum: a.value, type: "number", inclusive: a.inclusive, exact: false, message: a.message }), n.dirty()) : a.kind === "multipleOf" ? dt(e.data, a.value) !== 0 && (s = this._getOrReturnCtx(e, s), u(s, { code: d.not_multiple_of, multipleOf: a.value, message: a.message }), n.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (s = this._getOrReturnCtx(e, s), u(s, { code: d.not_finite, message: a.message }), n.dirty()) : g.assertNever(a);
    return { status: n.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, true, h.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, false, h.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, true, h.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, false, h.toString(t));
  }
  setLimit(e, t, s, n) {
    return new r4({ ...this._def, checks: [...this._def.checks, { kind: e, value: t, inclusive: s, message: h.toString(n) }] });
  }
  _addCheck(e) {
    return new r4({ ...this._def, checks: [...this._def.checks, e] });
  }
  int(e) {
    return this._addCheck({ kind: "int", message: h.toString(e) });
  }
  positive(e) {
    return this._addCheck({ kind: "min", value: 0, inclusive: false, message: h.toString(e) });
  }
  negative(e) {
    return this._addCheck({ kind: "max", value: 0, inclusive: false, message: h.toString(e) });
  }
  nonpositive(e) {
    return this._addCheck({ kind: "max", value: 0, inclusive: true, message: h.toString(e) });
  }
  nonnegative(e) {
    return this._addCheck({ kind: "min", value: 0, inclusive: true, message: h.toString(e) });
  }
  multipleOf(e, t) {
    return this._addCheck({ kind: "multipleOf", value: e, message: h.toString(t) });
  }
  finite(e) {
    return this._addCheck({ kind: "finite", message: h.toString(e) });
  }
  safe(e) {
    return this._addCheck({ kind: "min", inclusive: true, value: Number.MIN_SAFE_INTEGER, message: h.toString(e) })._addCheck({ kind: "max", inclusive: true, value: Number.MAX_SAFE_INTEGER, message: h.toString(e) });
  }
  get minValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && g.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (let s of this._def.checks) {
      if (s.kind === "finite" || s.kind === "int" || s.kind === "multipleOf") return true;
      s.kind === "min" ? (t === null || s.value > t) && (t = s.value) : s.kind === "max" && (e === null || s.value < e) && (e = s.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
};
z.create = (r16) => new z({ checks: [], typeName: m.ZodNumber, coerce: r16?.coerce || false, ..._(r16) });
var D = class r5 extends y {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce) try {
      e.data = BigInt(e.data);
    } catch {
      return this._getInvalidInput(e);
    }
    if (this._getType(e) !== f.bigint) return this._getInvalidInput(e);
    let s, n = new x();
    for (let a of this._def.checks) a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (s = this._getOrReturnCtx(e, s), u(s, { code: d.too_small, type: "bigint", minimum: a.value, inclusive: a.inclusive, message: a.message }), n.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (s = this._getOrReturnCtx(e, s), u(s, { code: d.too_big, type: "bigint", maximum: a.value, inclusive: a.inclusive, message: a.message }), n.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (s = this._getOrReturnCtx(e, s), u(s, { code: d.not_multiple_of, multipleOf: a.value, message: a.message }), n.dirty()) : g.assertNever(a);
    return { status: n.value, value: e.data };
  }
  _getInvalidInput(e) {
    let t = this._getOrReturnCtx(e);
    return u(t, { code: d.invalid_type, expected: f.bigint, received: t.parsedType }), v;
  }
  gte(e, t) {
    return this.setLimit("min", e, true, h.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, false, h.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, true, h.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, false, h.toString(t));
  }
  setLimit(e, t, s, n) {
    return new r5({ ...this._def, checks: [...this._def.checks, { kind: e, value: t, inclusive: s, message: h.toString(n) }] });
  }
  _addCheck(e) {
    return new r5({ ...this._def, checks: [...this._def.checks, e] });
  }
  positive(e) {
    return this._addCheck({ kind: "min", value: BigInt(0), inclusive: false, message: h.toString(e) });
  }
  negative(e) {
    return this._addCheck({ kind: "max", value: BigInt(0), inclusive: false, message: h.toString(e) });
  }
  nonpositive(e) {
    return this._addCheck({ kind: "max", value: BigInt(0), inclusive: true, message: h.toString(e) });
  }
  nonnegative(e) {
    return this._addCheck({ kind: "min", value: BigInt(0), inclusive: true, message: h.toString(e) });
  }
  multipleOf(e, t) {
    return this._addCheck({ kind: "multipleOf", value: e, message: h.toString(t) });
  }
  get minValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
};
D.create = (r16) => {
  var e;
  return new D({ checks: [], typeName: m.ZodBigInt, coerce: (e = r16?.coerce) !== null && e !== void 0 ? e : false, ..._(r16) });
};
var L = class extends y {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== f.boolean) {
      let s = this._getOrReturnCtx(e);
      return u(s, { code: d.invalid_type, expected: f.boolean, received: s.parsedType }), v;
    }
    return b(e.data);
  }
};
L.create = (r16) => new L({ typeName: m.ZodBoolean, coerce: r16?.coerce || false, ..._(r16) });
var U = class r6 extends y {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== f.date) {
      let a = this._getOrReturnCtx(e);
      return u(a, { code: d.invalid_type, expected: f.date, received: a.parsedType }), v;
    }
    if (isNaN(e.data.getTime())) {
      let a = this._getOrReturnCtx(e);
      return u(a, { code: d.invalid_date }), v;
    }
    let s = new x(), n;
    for (let a of this._def.checks) a.kind === "min" ? e.data.getTime() < a.value && (n = this._getOrReturnCtx(e, n), u(n, { code: d.too_small, message: a.message, inclusive: true, exact: false, minimum: a.value, type: "date" }), s.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (n = this._getOrReturnCtx(e, n), u(n, { code: d.too_big, message: a.message, inclusive: true, exact: false, maximum: a.value, type: "date" }), s.dirty()) : g.assertNever(a);
    return { status: s.value, value: new Date(e.data.getTime()) };
  }
  _addCheck(e) {
    return new r6({ ...this._def, checks: [...this._def.checks, e] });
  }
  min(e, t) {
    return this._addCheck({ kind: "min", value: e.getTime(), message: h.toString(t) });
  }
  max(e, t) {
    return this._addCheck({ kind: "max", value: e.getTime(), message: h.toString(t) });
  }
  get minDate() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
};
U.create = (r16) => new U({ checks: [], coerce: r16?.coerce || false, typeName: m.ZodDate, ..._(r16) });
var se = class extends y {
  _parse(e) {
    if (this._getType(e) !== f.symbol) {
      let s = this._getOrReturnCtx(e);
      return u(s, { code: d.invalid_type, expected: f.symbol, received: s.parsedType }), v;
    }
    return b(e.data);
  }
};
se.create = (r16) => new se({ typeName: m.ZodSymbol, ..._(r16) });
var F = class extends y {
  _parse(e) {
    if (this._getType(e) !== f.undefined) {
      let s = this._getOrReturnCtx(e);
      return u(s, { code: d.invalid_type, expected: f.undefined, received: s.parsedType }), v;
    }
    return b(e.data);
  }
};
F.create = (r16) => new F({ typeName: m.ZodUndefined, ..._(r16) });
var B = class extends y {
  _parse(e) {
    if (this._getType(e) !== f.null) {
      let s = this._getOrReturnCtx(e);
      return u(s, { code: d.invalid_type, expected: f.null, received: s.parsedType }), v;
    }
    return b(e.data);
  }
};
B.create = (r16) => new B({ typeName: m.ZodNull, ..._(r16) });
var M = class extends y {
  constructor() {
    super(...arguments), this._any = true;
  }
  _parse(e) {
    return b(e.data);
  }
};
M.create = (r16) => new M({ typeName: m.ZodAny, ..._(r16) });
var N = class extends y {
  constructor() {
    super(...arguments), this._unknown = true;
  }
  _parse(e) {
    return b(e.data);
  }
};
N.create = (r16) => new N({ typeName: m.ZodUnknown, ..._(r16) });
var A = class extends y {
  _parse(e) {
    let t = this._getOrReturnCtx(e);
    return u(t, { code: d.invalid_type, expected: f.never, received: t.parsedType }), v;
  }
};
A.create = (r16) => new A({ typeName: m.ZodNever, ..._(r16) });
var ne = class extends y {
  _parse(e) {
    if (this._getType(e) !== f.undefined) {
      let s = this._getOrReturnCtx(e);
      return u(s, { code: d.invalid_type, expected: f.void, received: s.parsedType }), v;
    }
    return b(e.data);
  }
};
ne.create = (r16) => new ne({ typeName: m.ZodVoid, ..._(r16) });
var I = class r7 extends y {
  _parse(e) {
    let { ctx: t, status: s } = this._processInputParams(e), n = this._def;
    if (t.parsedType !== f.array) return u(t, { code: d.invalid_type, expected: f.array, received: t.parsedType }), v;
    if (n.exactLength !== null) {
      let i = t.data.length > n.exactLength.value, o = t.data.length < n.exactLength.value;
      (i || o) && (u(t, { code: i ? d.too_big : d.too_small, minimum: o ? n.exactLength.value : void 0, maximum: i ? n.exactLength.value : void 0, type: "array", inclusive: true, exact: true, message: n.exactLength.message }), s.dirty());
    }
    if (n.minLength !== null && t.data.length < n.minLength.value && (u(t, { code: d.too_small, minimum: n.minLength.value, type: "array", inclusive: true, exact: false, message: n.minLength.message }), s.dirty()), n.maxLength !== null && t.data.length > n.maxLength.value && (u(t, { code: d.too_big, maximum: n.maxLength.value, type: "array", inclusive: true, exact: false, message: n.maxLength.message }), s.dirty()), t.common.async) return Promise.all([...t.data].map((i, o) => n.type._parseAsync(new S(t, i, t.path, o)))).then((i) => x.mergeArray(s, i));
    let a = [...t.data].map((i, o) => n.type._parseSync(new S(t, i, t.path, o)));
    return x.mergeArray(s, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new r7({ ...this._def, minLength: { value: e, message: h.toString(t) } });
  }
  max(e, t) {
    return new r7({ ...this._def, maxLength: { value: e, message: h.toString(t) } });
  }
  length(e, t) {
    return new r7({ ...this._def, exactLength: { value: e, message: h.toString(t) } });
  }
  nonempty(e) {
    return this.min(1, e);
  }
};
I.create = (r16, e) => new I({ type: r16, minLength: null, maxLength: null, exactLength: null, typeName: m.ZodArray, ..._(e) });
function ee(r16) {
  if (r16 instanceof w) {
    let e = {};
    for (let t in r16.shape) {
      let s = r16.shape[t];
      e[t] = O.create(ee(s));
    }
    return new w({ ...r16._def, shape: () => e });
  } else return r16 instanceof I ? new I({ ...r16._def, type: ee(r16.element) }) : r16 instanceof O ? O.create(ee(r16.unwrap())) : r16 instanceof Z ? Z.create(ee(r16.unwrap())) : r16 instanceof E ? E.create(r16.items.map((e) => ee(e))) : r16;
}
var w = class r8 extends y {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null) return this._cached;
    let e = this._def.shape(), t = g.objectKeys(e);
    return this._cached = { shape: e, keys: t };
  }
  _parse(e) {
    if (this._getType(e) !== f.object) {
      let c = this._getOrReturnCtx(e);
      return u(c, { code: d.invalid_type, expected: f.object, received: c.parsedType }), v;
    }
    let { status: s, ctx: n } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), o = [];
    if (!(this._def.catchall instanceof A && this._def.unknownKeys === "strip")) for (let c in n.data) i.includes(c) || o.push(c);
    let l = [];
    for (let c of i) {
      let p = a[c], k = n.data[c];
      l.push({ key: { status: "valid", value: c }, value: p._parse(new S(n, k, n.path, c)), alwaysSet: c in n.data });
    }
    if (this._def.catchall instanceof A) {
      let c = this._def.unknownKeys;
      if (c === "passthrough") for (let p of o) l.push({ key: { status: "valid", value: p }, value: { status: "valid", value: n.data[p] } });
      else if (c === "strict") o.length > 0 && (u(n, { code: d.unrecognized_keys, keys: o }), s.dirty());
      else if (c !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      let c = this._def.catchall;
      for (let p of o) {
        let k = n.data[p];
        l.push({ key: { status: "valid", value: p }, value: c._parse(new S(n, k, n.path, p)), alwaysSet: p in n.data });
      }
    }
    return n.common.async ? Promise.resolve().then(async () => {
      let c = [];
      for (let p of l) {
        let k = await p.key, he = await p.value;
        c.push({ key: k, value: he, alwaysSet: p.alwaysSet });
      }
      return c;
    }).then((c) => x.mergeObjectSync(s, c)) : x.mergeObjectSync(s, l);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return h.errToObj, new r8({ ...this._def, unknownKeys: "strict", ...e !== void 0 ? { errorMap: (t, s) => {
      var n, a, i, o;
      let l = (i = (a = (n = this._def).errorMap) === null || a === void 0 ? void 0 : a.call(n, t, s).message) !== null && i !== void 0 ? i : s.defaultError;
      return t.code === "unrecognized_keys" ? { message: (o = h.errToObj(e).message) !== null && o !== void 0 ? o : l } : { message: l };
    } } : {} });
  }
  strip() {
    return new r8({ ...this._def, unknownKeys: "strip" });
  }
  passthrough() {
    return new r8({ ...this._def, unknownKeys: "passthrough" });
  }
  extend(e) {
    return new r8({ ...this._def, shape: () => ({ ...this._def.shape(), ...e }) });
  }
  merge(e) {
    return new r8({ unknownKeys: e._def.unknownKeys, catchall: e._def.catchall, shape: () => ({ ...this._def.shape(), ...e._def.shape() }), typeName: m.ZodObject });
  }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  catchall(e) {
    return new r8({ ...this._def, catchall: e });
  }
  pick(e) {
    let t = {};
    return g.objectKeys(e).forEach((s) => {
      e[s] && this.shape[s] && (t[s] = this.shape[s]);
    }), new r8({ ...this._def, shape: () => t });
  }
  omit(e) {
    let t = {};
    return g.objectKeys(this.shape).forEach((s) => {
      e[s] || (t[s] = this.shape[s]);
    }), new r8({ ...this._def, shape: () => t });
  }
  deepPartial() {
    return ee(this);
  }
  partial(e) {
    let t = {};
    return g.objectKeys(this.shape).forEach((s) => {
      let n = this.shape[s];
      e && !e[s] ? t[s] = n : t[s] = n.optional();
    }), new r8({ ...this._def, shape: () => t });
  }
  required(e) {
    let t = {};
    return g.objectKeys(this.shape).forEach((s) => {
      if (e && !e[s]) t[s] = this.shape[s];
      else {
        let a = this.shape[s];
        for (; a instanceof O; ) a = a._def.innerType;
        t[s] = a;
      }
    }), new r8({ ...this._def, shape: () => t });
  }
  keyof() {
    return Ie(g.objectKeys(this.shape));
  }
};
w.create = (r16, e) => new w({ shape: () => r16, unknownKeys: "strip", catchall: A.create(), typeName: m.ZodObject, ..._(e) });
w.strictCreate = (r16, e) => new w({ shape: () => r16, unknownKeys: "strict", catchall: A.create(), typeName: m.ZodObject, ..._(e) });
w.lazycreate = (r16, e) => new w({ shape: r16, unknownKeys: "strip", catchall: A.create(), typeName: m.ZodObject, ..._(e) });
var W = class extends y {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), s = this._def.options;
    function n(a) {
      for (let o of a) if (o.result.status === "valid") return o.result;
      for (let o of a) if (o.result.status === "dirty") return t.common.issues.push(...o.ctx.common.issues), o.result;
      let i = a.map((o) => new T(o.ctx.common.issues));
      return u(t, { code: d.invalid_union, unionErrors: i }), v;
    }
    if (t.common.async) return Promise.all(s.map(async (a) => {
      let i = { ...t, common: { ...t.common, issues: [] }, parent: null };
      return { result: await a._parseAsync({ data: t.data, path: t.path, parent: i }), ctx: i };
    })).then(n);
    {
      let a, i = [];
      for (let l of s) {
        let c = { ...t, common: { ...t.common, issues: [] }, parent: null }, p = l._parseSync({ data: t.data, path: t.path, parent: c });
        if (p.status === "valid") return p;
        p.status === "dirty" && !a && (a = { result: p, ctx: c }), c.common.issues.length && i.push(c.common.issues);
      }
      if (a) return t.common.issues.push(...a.ctx.common.issues), a.result;
      let o = i.map((l) => new T(l));
      return u(t, { code: d.invalid_union, unionErrors: o }), v;
    }
  }
  get options() {
    return this._def.options;
  }
};
W.create = (r16, e) => new W({ options: r16, typeName: m.ZodUnion, ..._(e) });
var j = (r16) => r16 instanceof J ? j(r16.schema) : r16 instanceof C ? j(r16.innerType()) : r16 instanceof Y ? [r16.value] : r16 instanceof H ? r16.options : r16 instanceof G ? g.objectValues(r16.enum) : r16 instanceof X ? j(r16._def.innerType) : r16 instanceof F ? [void 0] : r16 instanceof B ? [null] : r16 instanceof O ? [void 0, ...j(r16.unwrap())] : r16 instanceof Z ? [null, ...j(r16.unwrap())] : r16 instanceof le || r16 instanceof K ? j(r16.unwrap()) : r16 instanceof Q ? j(r16._def.innerType) : [];
var _e = class r9 extends y {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== f.object) return u(t, { code: d.invalid_type, expected: f.object, received: t.parsedType }), v;
    let s = this.discriminator, n = t.data[s], a = this.optionsMap.get(n);
    return a ? t.common.async ? a._parseAsync({ data: t.data, path: t.path, parent: t }) : a._parseSync({ data: t.data, path: t.path, parent: t }) : (u(t, { code: d.invalid_union_discriminator, options: Array.from(this.optionsMap.keys()), path: [s] }), v);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  static create(e, t, s) {
    let n = /* @__PURE__ */ new Map();
    for (let a of t) {
      let i = j(a.shape[e]);
      if (!i.length) throw new Error(\`A discriminator value for key \\\`\${e}\\\` could not be extracted from all schema options\`);
      for (let o of i) {
        if (n.has(o)) throw new Error(\`Discriminator property \${String(e)} has duplicate value \${String(o)}\`);
        n.set(o, a);
      }
    }
    return new r9({ typeName: m.ZodDiscriminatedUnion, discriminator: e, options: t, optionsMap: n, ..._(s) });
  }
};
function Ce(r16, e) {
  let t = R(r16), s = R(e);
  if (r16 === e) return { valid: true, data: r16 };
  if (t === f.object && s === f.object) {
    let n = g.objectKeys(e), a = g.objectKeys(r16).filter((o) => n.indexOf(o) !== -1), i = { ...r16, ...e };
    for (let o of a) {
      let l = Ce(r16[o], e[o]);
      if (!l.valid) return { valid: false };
      i[o] = l.data;
    }
    return { valid: true, data: i };
  } else if (t === f.array && s === f.array) {
    if (r16.length !== e.length) return { valid: false };
    let n = [];
    for (let a = 0; a < r16.length; a++) {
      let i = r16[a], o = e[a], l = Ce(i, o);
      if (!l.valid) return { valid: false };
      n.push(l.data);
    }
    return { valid: true, data: n };
  } else return t === f.date && s === f.date && +r16 == +e ? { valid: true, data: r16 } : { valid: false };
}
var q = class extends y {
  _parse(e) {
    let { status: t, ctx: s } = this._processInputParams(e), n = (a, i) => {
      if (we(a) || we(i)) return v;
      let o = Ce(a.value, i.value);
      return o.valid ? ((Te(a) || Te(i)) && t.dirty(), { status: t.value, value: o.data }) : (u(s, { code: d.invalid_intersection_types }), v);
    };
    return s.common.async ? Promise.all([this._def.left._parseAsync({ data: s.data, path: s.path, parent: s }), this._def.right._parseAsync({ data: s.data, path: s.path, parent: s })]).then(([a, i]) => n(a, i)) : n(this._def.left._parseSync({ data: s.data, path: s.path, parent: s }), this._def.right._parseSync({ data: s.data, path: s.path, parent: s }));
  }
};
q.create = (r16, e, t) => new q({ left: r16, right: e, typeName: m.ZodIntersection, ..._(t) });
var E = class r10 extends y {
  _parse(e) {
    let { status: t, ctx: s } = this._processInputParams(e);
    if (s.parsedType !== f.array) return u(s, { code: d.invalid_type, expected: f.array, received: s.parsedType }), v;
    if (s.data.length < this._def.items.length) return u(s, { code: d.too_small, minimum: this._def.items.length, inclusive: true, exact: false, type: "array" }), v;
    !this._def.rest && s.data.length > this._def.items.length && (u(s, { code: d.too_big, maximum: this._def.items.length, inclusive: true, exact: false, type: "array" }), t.dirty());
    let a = [...s.data].map((i, o) => {
      let l = this._def.items[o] || this._def.rest;
      return l ? l._parse(new S(s, i, s.path, o)) : null;
    }).filter((i) => !!i);
    return s.common.async ? Promise.all(a).then((i) => x.mergeArray(t, i)) : x.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new r10({ ...this._def, rest: e });
  }
};
E.create = (r16, e) => {
  if (!Array.isArray(r16)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new E({ items: r16, typeName: m.ZodTuple, rest: null, ..._(e) });
};
var ye = class r11 extends y {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    let { status: t, ctx: s } = this._processInputParams(e);
    if (s.parsedType !== f.object) return u(s, { code: d.invalid_type, expected: f.object, received: s.parsedType }), v;
    let n = [], a = this._def.keyType, i = this._def.valueType;
    for (let o in s.data) n.push({ key: a._parse(new S(s, o, s.path, o)), value: i._parse(new S(s, s.data[o], s.path, o)), alwaysSet: o in s.data });
    return s.common.async ? x.mergeObjectAsync(t, n) : x.mergeObjectSync(t, n);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, s) {
    return t instanceof y ? new r11({ keyType: e, valueType: t, typeName: m.ZodRecord, ..._(s) }) : new r11({ keyType: $.create(), valueType: e, typeName: m.ZodRecord, ..._(t) });
  }
};
var ae = class extends y {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    let { status: t, ctx: s } = this._processInputParams(e);
    if (s.parsedType !== f.map) return u(s, { code: d.invalid_type, expected: f.map, received: s.parsedType }), v;
    let n = this._def.keyType, a = this._def.valueType, i = [...s.data.entries()].map(([o, l], c) => ({ key: n._parse(new S(s, o, s.path, [c, "key"])), value: a._parse(new S(s, l, s.path, [c, "value"])) }));
    if (s.common.async) {
      let o = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (let l of i) {
          let c = await l.key, p = await l.value;
          if (c.status === "aborted" || p.status === "aborted") return v;
          (c.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(c.value, p.value);
        }
        return { status: t.value, value: o };
      });
    } else {
      let o = /* @__PURE__ */ new Map();
      for (let l of i) {
        let c = l.key, p = l.value;
        if (c.status === "aborted" || p.status === "aborted") return v;
        (c.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(c.value, p.value);
      }
      return { status: t.value, value: o };
    }
  }
};
ae.create = (r16, e, t) => new ae({ valueType: e, keyType: r16, typeName: m.ZodMap, ..._(t) });
var ie = class r12 extends y {
  _parse(e) {
    let { status: t, ctx: s } = this._processInputParams(e);
    if (s.parsedType !== f.set) return u(s, { code: d.invalid_type, expected: f.set, received: s.parsedType }), v;
    let n = this._def;
    n.minSize !== null && s.data.size < n.minSize.value && (u(s, { code: d.too_small, minimum: n.minSize.value, type: "set", inclusive: true, exact: false, message: n.minSize.message }), t.dirty()), n.maxSize !== null && s.data.size > n.maxSize.value && (u(s, { code: d.too_big, maximum: n.maxSize.value, type: "set", inclusive: true, exact: false, message: n.maxSize.message }), t.dirty());
    let a = this._def.valueType;
    function i(l) {
      let c = /* @__PURE__ */ new Set();
      for (let p of l) {
        if (p.status === "aborted") return v;
        p.status === "dirty" && t.dirty(), c.add(p.value);
      }
      return { status: t.value, value: c };
    }
    let o = [...s.data.values()].map((l, c) => a._parse(new S(s, l, s.path, c)));
    return s.common.async ? Promise.all(o).then((l) => i(l)) : i(o);
  }
  min(e, t) {
    return new r12({ ...this._def, minSize: { value: e, message: h.toString(t) } });
  }
  max(e, t) {
    return new r12({ ...this._def, maxSize: { value: e, message: h.toString(t) } });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
};
ie.create = (r16, e) => new ie({ valueType: r16, minSize: null, maxSize: null, typeName: m.ZodSet, ..._(e) });
var ge = class r13 extends y {
  constructor() {
    super(...arguments), this.validate = this.implement;
  }
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== f.function) return u(t, { code: d.invalid_type, expected: f.function, received: t.parsedType }), v;
    function s(o, l) {
      return me({ data: o, path: t.path, errorMaps: [t.common.contextualErrorMap, t.schemaErrorMap, pe(), re].filter((c) => !!c), issueData: { code: d.invalid_arguments, argumentsError: l } });
    }
    function n(o, l) {
      return me({ data: o, path: t.path, errorMaps: [t.common.contextualErrorMap, t.schemaErrorMap, pe(), re].filter((c) => !!c), issueData: { code: d.invalid_return_type, returnTypeError: l } });
    }
    let a = { errorMap: t.common.contextualErrorMap }, i = t.data;
    if (this._def.returns instanceof V) {
      let o = this;
      return b(async function(...l) {
        let c = new T([]), p = await o._def.args.parseAsync(l, a).catch((xe) => {
          throw c.addIssue(s(l, xe)), c;
        }), k = await Reflect.apply(i, this, p);
        return await o._def.returns._def.type.parseAsync(k, a).catch((xe) => {
          throw c.addIssue(n(k, xe)), c;
        });
      });
    } else {
      let o = this;
      return b(function(...l) {
        let c = o._def.args.safeParse(l, a);
        if (!c.success) throw new T([s(l, c.error)]);
        let p = Reflect.apply(i, this, c.data), k = o._def.returns.safeParse(p, a);
        if (!k.success) throw new T([n(p, k.error)]);
        return k.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...e) {
    return new r13({ ...this._def, args: E.create(e).rest(N.create()) });
  }
  returns(e) {
    return new r13({ ...this._def, returns: e });
  }
  implement(e) {
    return this.parse(e);
  }
  strictImplement(e) {
    return this.parse(e);
  }
  static create(e, t, s) {
    return new r13({ args: e || E.create([]).rest(N.create()), returns: t || N.create(), typeName: m.ZodFunction, ..._(s) });
  }
};
var J = class extends y {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
};
J.create = (r16, e) => new J({ getter: r16, typeName: m.ZodLazy, ..._(e) });
var Y = class extends y {
  _parse(e) {
    if (e.data !== this._def.value) {
      let t = this._getOrReturnCtx(e);
      return u(t, { received: t.data, code: d.invalid_literal, expected: this._def.value }), v;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
};
Y.create = (r16, e) => new Y({ value: r16, typeName: m.ZodLiteral, ..._(e) });
function Ie(r16, e) {
  return new H({ values: r16, typeName: m.ZodEnum, ..._(e) });
}
var H = class r14 extends y {
  constructor() {
    super(...arguments), de.set(this, void 0);
  }
  _parse(e) {
    if (typeof e.data != "string") {
      let t = this._getOrReturnCtx(e), s = this._def.values;
      return u(t, { expected: g.joinValues(s), received: t.parsedType, code: d.invalid_type }), v;
    }
    if (ve(this, de, "f") || Ze(this, de, new Set(this._def.values), "f"), !ve(this, de, "f").has(e.data)) {
      let t = this._getOrReturnCtx(e), s = this._def.values;
      return u(t, { received: t.data, code: d.invalid_enum_value, options: s }), v;
    }
    return b(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    let e = {};
    for (let t of this._def.values) e[t] = t;
    return e;
  }
  get Values() {
    let e = {};
    for (let t of this._def.values) e[t] = t;
    return e;
  }
  get Enum() {
    let e = {};
    for (let t of this._def.values) e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return r14.create(e, { ...this._def, ...t });
  }
  exclude(e, t = this._def) {
    return r14.create(this.options.filter((s) => !e.includes(s)), { ...this._def, ...t });
  }
};
de = /* @__PURE__ */ new WeakMap();
H.create = Ie;
var G = class extends y {
  constructor() {
    super(...arguments), ce.set(this, void 0);
  }
  _parse(e) {
    let t = g.getValidEnumValues(this._def.values), s = this._getOrReturnCtx(e);
    if (s.parsedType !== f.string && s.parsedType !== f.number) {
      let n = g.objectValues(t);
      return u(s, { expected: g.joinValues(n), received: s.parsedType, code: d.invalid_type }), v;
    }
    if (ve(this, ce, "f") || Ze(this, ce, new Set(g.getValidEnumValues(this._def.values)), "f"), !ve(this, ce, "f").has(e.data)) {
      let n = g.objectValues(t);
      return u(s, { received: s.data, code: d.invalid_enum_value, options: n }), v;
    }
    return b(e.data);
  }
  get enum() {
    return this._def.values;
  }
};
ce = /* @__PURE__ */ new WeakMap();
G.create = (r16, e) => new G({ values: r16, typeName: m.ZodNativeEnum, ..._(e) });
var V = class extends y {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== f.promise && t.common.async === false) return u(t, { code: d.invalid_type, expected: f.promise, received: t.parsedType }), v;
    let s = t.parsedType === f.promise ? t.data : Promise.resolve(t.data);
    return b(s.then((n) => this._def.type.parseAsync(n, { path: t.path, errorMap: t.common.contextualErrorMap })));
  }
};
V.create = (r16, e) => new V({ type: r16, typeName: m.ZodPromise, ..._(e) });
var C = class extends y {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === m.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    let { status: t, ctx: s } = this._processInputParams(e), n = this._def.effect || null, a = { addIssue: (i) => {
      u(s, i), i.fatal ? t.abort() : t.dirty();
    }, get path() {
      return s.path;
    } };
    if (a.addIssue = a.addIssue.bind(a), n.type === "preprocess") {
      let i = n.transform(s.data, a);
      if (s.common.async) return Promise.resolve(i).then(async (o) => {
        if (t.value === "aborted") return v;
        let l = await this._def.schema._parseAsync({ data: o, path: s.path, parent: s });
        return l.status === "aborted" ? v : l.status === "dirty" || t.value === "dirty" ? te(l.value) : l;
      });
      {
        if (t.value === "aborted") return v;
        let o = this._def.schema._parseSync({ data: i, path: s.path, parent: s });
        return o.status === "aborted" ? v : o.status === "dirty" || t.value === "dirty" ? te(o.value) : o;
      }
    }
    if (n.type === "refinement") {
      let i = (o) => {
        let l = n.refinement(o, a);
        if (s.common.async) return Promise.resolve(l);
        if (l instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return o;
      };
      if (s.common.async === false) {
        let o = this._def.schema._parseSync({ data: s.data, path: s.path, parent: s });
        return o.status === "aborted" ? v : (o.status === "dirty" && t.dirty(), i(o.value), { status: t.value, value: o.value });
      } else return this._def.schema._parseAsync({ data: s.data, path: s.path, parent: s }).then((o) => o.status === "aborted" ? v : (o.status === "dirty" && t.dirty(), i(o.value).then(() => ({ status: t.value, value: o.value }))));
    }
    if (n.type === "transform") if (s.common.async === false) {
      let i = this._def.schema._parseSync({ data: s.data, path: s.path, parent: s });
      if (!P(i)) return i;
      let o = n.transform(i.value, a);
      if (o instanceof Promise) throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
      return { status: t.value, value: o };
    } else return this._def.schema._parseAsync({ data: s.data, path: s.path, parent: s }).then((i) => P(i) ? Promise.resolve(n.transform(i.value, a)).then((o) => ({ status: t.value, value: o })) : i);
    g.assertNever(n);
  }
};
C.create = (r16, e, t) => new C({ schema: r16, typeName: m.ZodEffects, effect: e, ..._(t) });
C.createWithPreprocess = (r16, e, t) => new C({ schema: e, effect: { type: "preprocess", transform: r16 }, typeName: m.ZodEffects, ..._(t) });
var O = class extends y {
  _parse(e) {
    return this._getType(e) === f.undefined ? b(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
};
O.create = (r16, e) => new O({ innerType: r16, typeName: m.ZodOptional, ..._(e) });
var Z = class extends y {
  _parse(e) {
    return this._getType(e) === f.null ? b(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
};
Z.create = (r16, e) => new Z({ innerType: r16, typeName: m.ZodNullable, ..._(e) });
var X = class extends y {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), s = t.data;
    return t.parsedType === f.undefined && (s = this._def.defaultValue()), this._def.innerType._parse({ data: s, path: t.path, parent: t });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
X.create = (r16, e) => new X({ innerType: r16, typeName: m.ZodDefault, defaultValue: typeof e.default == "function" ? e.default : () => e.default, ..._(e) });
var Q = class extends y {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), s = { ...t, common: { ...t.common, issues: [] } }, n = this._def.innerType._parse({ data: s.data, path: s.path, parent: { ...s } });
    return ue(n) ? n.then((a) => ({ status: "valid", value: a.status === "valid" ? a.value : this._def.catchValue({ get error() {
      return new T(s.common.issues);
    }, input: s.data }) })) : { status: "valid", value: n.status === "valid" ? n.value : this._def.catchValue({ get error() {
      return new T(s.common.issues);
    }, input: s.data }) };
  }
  removeCatch() {
    return this._def.innerType;
  }
};
Q.create = (r16, e) => new Q({ innerType: r16, typeName: m.ZodCatch, catchValue: typeof e.catch == "function" ? e.catch : () => e.catch, ..._(e) });
var oe = class extends y {
  _parse(e) {
    if (this._getType(e) !== f.nan) {
      let s = this._getOrReturnCtx(e);
      return u(s, { code: d.invalid_type, expected: f.nan, received: s.parsedType }), v;
    }
    return { status: "valid", value: e.data };
  }
};
oe.create = (r16) => new oe({ typeName: m.ZodNaN, ..._(r16) });
var ct = Symbol("zod_brand");
var le = class extends y {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), s = t.data;
    return this._def.type._parse({ data: s, path: t.path, parent: t });
  }
  unwrap() {
    return this._def.type;
  }
};
var fe = class r15 extends y {
  _parse(e) {
    let { status: t, ctx: s } = this._processInputParams(e);
    if (s.common.async) return (async () => {
      let a = await this._def.in._parseAsync({ data: s.data, path: s.path, parent: s });
      return a.status === "aborted" ? v : a.status === "dirty" ? (t.dirty(), te(a.value)) : this._def.out._parseAsync({ data: a.value, path: s.path, parent: s });
    })();
    {
      let n = this._def.in._parseSync({ data: s.data, path: s.path, parent: s });
      return n.status === "aborted" ? v : n.status === "dirty" ? (t.dirty(), { status: "dirty", value: n.value }) : this._def.out._parseSync({ data: n.value, path: s.path, parent: s });
    }
  }
  static create(e, t) {
    return new r15({ in: e, out: t, typeName: m.ZodPipeline });
  }
};
var K = class extends y {
  _parse(e) {
    let t = this._def.innerType._parse(e), s = (n) => (P(n) && (n.value = Object.freeze(n.value)), n);
    return ue(t) ? t.then((n) => s(n)) : s(t);
  }
  unwrap() {
    return this._def.innerType;
  }
};
K.create = (r16, e) => new K({ innerType: r16, typeName: m.ZodReadonly, ..._(e) });
function Se(r16, e) {
  let t = typeof r16 == "function" ? r16(e) : typeof r16 == "string" ? { message: r16 } : r16;
  return typeof t == "string" ? { message: t } : t;
}
function $e(r16, e = {}, t) {
  return r16 ? M.create().superRefine((s, n) => {
    var a, i;
    let o = r16(s);
    if (o instanceof Promise) return o.then((l) => {
      var c, p;
      if (!l) {
        let k = Se(e, s), he = (p = (c = k.fatal) !== null && c !== void 0 ? c : t) !== null && p !== void 0 ? p : true;
        n.addIssue({ code: "custom", ...k, fatal: he });
      }
    });
    if (!o) {
      let l = Se(e, s), c = (i = (a = l.fatal) !== null && a !== void 0 ? a : t) !== null && i !== void 0 ? i : true;
      n.addIssue({ code: "custom", ...l, fatal: c });
    }
  }) : M.create();
}
var ut = { object: w.lazycreate };
var m;
(function(r16) {
  r16.ZodString = "ZodString", r16.ZodNumber = "ZodNumber", r16.ZodNaN = "ZodNaN", r16.ZodBigInt = "ZodBigInt", r16.ZodBoolean = "ZodBoolean", r16.ZodDate = "ZodDate", r16.ZodSymbol = "ZodSymbol", r16.ZodUndefined = "ZodUndefined", r16.ZodNull = "ZodNull", r16.ZodAny = "ZodAny", r16.ZodUnknown = "ZodUnknown", r16.ZodNever = "ZodNever", r16.ZodVoid = "ZodVoid", r16.ZodArray = "ZodArray", r16.ZodObject = "ZodObject", r16.ZodUnion = "ZodUnion", r16.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", r16.ZodIntersection = "ZodIntersection", r16.ZodTuple = "ZodTuple", r16.ZodRecord = "ZodRecord", r16.ZodMap = "ZodMap", r16.ZodSet = "ZodSet", r16.ZodFunction = "ZodFunction", r16.ZodLazy = "ZodLazy", r16.ZodLiteral = "ZodLiteral", r16.ZodEnum = "ZodEnum", r16.ZodEffects = "ZodEffects", r16.ZodNativeEnum = "ZodNativeEnum", r16.ZodOptional = "ZodOptional", r16.ZodNullable = "ZodNullable", r16.ZodDefault = "ZodDefault", r16.ZodCatch = "ZodCatch", r16.ZodPromise = "ZodPromise", r16.ZodBranded = "ZodBranded", r16.ZodPipeline = "ZodPipeline", r16.ZodReadonly = "ZodReadonly";
})(m || (m = {}));
var lt = (r16, e = { message: \`Input not instance of \${r16.name}\` }) => $e((t) => t instanceof r16, e);
var Me = $.create;
var Ve = z.create;
var ft = oe.create;
var ht = D.create;
var Pe = L.create;
var pt = U.create;
var mt = se.create;
var vt = F.create;
var _t = B.create;
var yt = M.create;
var gt = N.create;
var xt = A.create;
var kt = ne.create;
var bt = I.create;
var wt = w.create;
var Tt = w.strictCreate;
var Ct = W.create;
var Ot = _e.create;
var St = q.create;
var At = E.create;
var Et = ye.create;
var Zt = ae.create;
var jt = ie.create;
var Rt = ge.create;
var Nt = J.create;
var It = Y.create;
var $t = H.create;
var Mt = G.create;
var Vt = V.create;
var Ae = C.create;
var Pt = O.create;
var zt = Z.create;
var Dt = C.createWithPreprocess;
var Lt = fe.create;
var Ut = () => Me().optional();
var Ft = () => Ve().optional();
var Bt = () => Pe().optional();
var Wt = { string: (r16) => $.create({ ...r16, coerce: true }), number: (r16) => z.create({ ...r16, coerce: true }), boolean: (r16) => L.create({ ...r16, coerce: true }), bigint: (r16) => D.create({ ...r16, coerce: true }), date: (r16) => U.create({ ...r16, coerce: true }) };
var qt = v;
var Jt = Object.freeze({ __proto__: null, defaultErrorMap: re, setErrorMap: De, getErrorMap: pe, makeIssue: me, EMPTY_PATH: Le, addIssueToContext: u, ParseStatus: x, INVALID: v, DIRTY: te, OK: b, isAborted: we, isDirty: Te, isValid: P, isAsync: ue, get util() {
  return g;
}, get objectUtil() {
  return be;
}, ZodParsedType: f, getParsedType: R, ZodType: y, datetimeRegex: Ne, ZodString: $, ZodNumber: z, ZodBigInt: D, ZodBoolean: L, ZodDate: U, ZodSymbol: se, ZodUndefined: F, ZodNull: B, ZodAny: M, ZodUnknown: N, ZodNever: A, ZodVoid: ne, ZodArray: I, ZodObject: w, ZodUnion: W, ZodDiscriminatedUnion: _e, ZodIntersection: q, ZodTuple: E, ZodRecord: ye, ZodMap: ae, ZodSet: ie, ZodFunction: ge, ZodLazy: J, ZodLiteral: Y, ZodEnum: H, ZodNativeEnum: G, ZodPromise: V, ZodEffects: C, ZodTransformer: C, ZodOptional: O, ZodNullable: Z, ZodDefault: X, ZodCatch: Q, ZodNaN: oe, BRAND: ct, ZodBranded: le, ZodPipeline: fe, ZodReadonly: K, custom: $e, Schema: y, ZodSchema: y, late: ut, get ZodFirstPartyTypeKind() {
  return m;
}, coerce: Wt, any: yt, array: bt, bigint: ht, boolean: Pe, date: pt, discriminatedUnion: Ot, effect: Ae, enum: $t, function: Rt, instanceof: lt, intersection: St, lazy: Nt, literal: It, map: Zt, nan: ft, nativeEnum: Mt, never: xt, null: _t, nullable: zt, number: Ve, object: wt, oboolean: Bt, onumber: Ft, optional: Pt, ostring: Ut, pipeline: Lt, preprocess: Dt, promise: Vt, record: Et, set: jt, strictObject: Tt, string: Me, symbol: mt, transformer: Ae, tuple: At, undefined: vt, union: Ct, unknown: gt, void: kt, NEVER: qt, ZodIssueCode: d, quotelessJson: ze, ZodError: T });

// .vitest-testdirs/vitest-zod-esm-zod-resolve-zod-3-24-2/src/zod.ts
var UserSchema = Jt.object({
  name: Jt.string(),
  age: Jt.number()
});
var validateUser = (data) => {
  return UserSchema.parse(data);
};
export {
  validateUser
};
"
`;
